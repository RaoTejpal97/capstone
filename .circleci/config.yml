version: 2.1

orbs:
    aws-cli: circleci/aws-cli@3.1.5
    kubernetes: circleci/kubernetes@1.3
    aws-eks: circleci/aws-eks@2.2.0

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-kubectl:
    description: Install Kubectl
    steps:
      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            export PATH=$PATH:/usr/local/bin/kubectl

jobs:
    install_lint:
        docker:
            - image: python:3.7.3-stretch
            
        working_directory: ~/repo
        
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "requirements.txt" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
        
            - run:
                name: "Install py dependencies and hadolint"
                command: |
                
                    # REMOVE LATER #######
                    # python3 -m venv ~/.project
                    # . ~/.project/bin/activate
                    
                    # Configuring python virtual environment
                    python3 -m venv venv
                    . venv/bin/activate
                    
                    # Installing python dependencies and hadolint
                    make install
                    
            - save_cache:
                paths:
                    - ./venv
                key: v1-dependencies-{{ checksum "requirements.txt" }}
                
            - run:
                name: "Lint python app and Docker file"
                command: |
                    . venv/bin/activate
                    make lint

    build_publish_dockerimage:
        docker:
            - image: cimg/base:stable
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: "Create docker image"
                command: |
                    bash script/docker_build.sh
            - run:
                name: "Upload docker image to docker hub"
                command: bash script/docker_publish.sh $DOCKERHUB_PW

    create_cluster:
        docker:
            - image: python:3.7.3-stretch
        steps:
            - checkout
            - run:
                name: "Install dependencies for kubernetes"
                command: make install_kubernetes_tools
            - aws-cli/setup:
                aws-access-key-id: AWS_ACCESS_KEY
                aws-secret-access-key: AWS_SECRET_KEY
                aws-region: AWS_REGION
            - run:
                name: "Create EKS cluster"
                command: bash script/create_cluster.sh
            - run:
                name: Update kubectl config 
                command: |
                    aws eks update-kubeconfig --region us-east-1 --name capstone1

    # update_cluster:
    #     docker:
    #         - image: amazon/aws-cli:latest
    #     steps:
    #         - checkout
    #         - run:
    #             name: set-credential
    #             command: |
    #                 aws configure set aws_access_key_id $AWS_ACCESS_KEY
    #                 aws configure set aws_secret_access_key $AWS_SECRET_KEY
    #                 aws configure set region $AWS_REGION
    #         - kubernetes/install-kubectl
    #         - run:
    #             name: Update Kube config
    #             command: |
    #                 aws eks update-kubeconfig --region us-east-1 --name capstone1
    #         - run:
    #             name: Apply Deployment
    #             command: |
    #                 kubectl apply -f deploy_service.yml
    #         - kubernetes/create-or-update-resource:
    #             get-rollout-status: true
    #             resource-file-path: deploy_service.yml
    #             resource-name: deployment/server
    #             show-kubectl-command: true
    #         - run:
    #             name: Get details
    #             command: |
    #                  echo "loadbalancer :"
    #                  kubectl get service/loadbalancer-service
    #                  echo "Deploy, RS, SVC, Pod details:"
    #                  kubectl get deploy,rs,svc,pods

    update_cluster:
        docker:
            # - image: amazon/aws-cli:latest
            - image: cimg/base:stable
        steps:
            - checkout
            - install_awscli
            - install_ansible
            - install-kubectl
            - run:
                name: set-credential
                command: |
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY
                    aws configure set aws_secret_access_key $AWS_SECRET_KEY
                    aws configure set region $AWS_REGION
            - kubernetes/install-kubectl
            - run:
                name: Update Kube config
                command: |
                    aws eks update-kubeconfig --region us-east-1 --name capstone1
            # - run:
            #     name: Apply Deployment
            #     command: |
            #         kubectl apply -f deploy_service.yml
            - run:
                 name: Configure eks
                 command: |
           
                    ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/deploy_service.yml
                    
            - kubernetes/create-or-update-resource:
                get-rollout-status: true
                resource-file-path: deploy_service.yml
                resource-name: deployment/server
                show-kubectl-command: true
            - run:
                name: Get details
                command: |
                     echo "loadbalancer :"
                     kubectl get service/loadbalancer-service
                     echo "Deploy, RS, SVC, Pod details:"
                     kubectl get deploy,rs,svc,pods

workflows:
    default:
        jobs:
            - install_lint
            - build_publish_dockerimage:
                requires: [install_lint]
                # filters:
                #     branches:
                #         only: [main]
            - create_cluster:
                requires: [build_publish_dockerimage]
            - update_cluster:
                requires: [create_cluster] 